#define s1cdnm 10                   // SangamOne Connected Display Number of Modules
#define s1cdncol s1cdnm*8           // SangamOne Connected Display Number of Columns
#define s1mxchinmsg 25              // SangamOne Connected Display Max number of characters in a message (accomodate about 25 char string during test)
#define showdot 13                  // SangamOne Connected Display, value required to show a dot for no valid character, Ex scroll after last char in message
/*
int s1cdnm = 10;                    // SangamOne Connected Display Number of Modules
int s1cdncol = s1cdnm*8;            // SangamOne Connected Display Number of Columns
*/

static int number=0;
int pos=0,k=0,Counter=0,passcount=0,msgcount=0,i=0,j=0,n=0,pass=0;
char ch;

LedControl lc=LedControl(12,11,10,NBR_MTX);


// The message string library of messages for scrolling are listed below
char msgstrlib1[] = "One Two Three";
char msgstrlib2[] = "Two Three Four";
char msgstrlib3[] = "Three Four Five";
char msgstrlib4[] = "Four Five Six";
char msgstrlib5[] = "Five Six Seven";
char msgstrlib6[] = "Six Seven Eight";
char msgstrlib7[] = "Seven Eight Nine";
char msgstrlib8[] = "Eight Nine Ten";
char msgstrlib9[] = "Nine Ten Eleven";
char msgstrlib0[] = "A1B2C3D4E5F6G7H8I9JKLMNOPQR1S2T3U4V5W6X7Y8Z9  a1b2c3d4e5f6g7h8i9jklmnopqr1s2t3u4v5w6x7y8z9";
/*
char msgstrlib0[] = "A1B2C3D4E5F6G7H8I9JKLMNOPQR1S2T3U4V5W6X7Y8Z9  a1b2c3d4e5f6g7h8i9jklmnopqr1s2t3u4v5w6x7y8z9";
String limiters[] = "123456789a123456789b123456789c123456789d123456789e123456789f123456789g123456789h123456789i"
*/
char *msgstrcur; // this is a pointer to the currently active one from the message string library

int s1cdmsgnu=1;// SangamOne Connected Display message number, it identifies the number which is currently active from the message string library 
int s1cdchrnu=0;// SangamOne Connected Display character number, it identifies the character number which is currently being processed (0 <--> 90)
int s1cdimgof=0;// SangamOne Connected Display character image offset of the character which is currently being processed (0 <--> 5)

int chngrq1=1;
int chngrq2=1;


// Code created by RamaRao on June 10th 2014 (Start)
//
// ***** Section Begins below *****
// Code section below tested  by CS on MMM ddth 2014
//
// the character pointer will get properly initialised to the currently active one from the message string library
//
if (chngrq2)
{
     switch(s1cdmsgnu)
     {
     case 1:
      msgstrcur = &msgstrlib1[0];
      break;
     case 2:
      msgstrcur = &msgstrlib2[0];
      break;
     case 3:
      msgstrcur = &msgstrlib3[0];
      break;
     case 4:
      msgstrcur = &msgstrlib4[0];
      break;
     case 5:
      msgstrcur = &msgstrlib5[0];
      break;
     case 6:
      msgstrcur = &msgstrlib6[0];
      break;
     case 7:
      msgstrcur = &msgstrlib7[0];
      break;
     case 8:
      msgstrcur = &msgstrlib8[0];
      break;
     case 9:
      msgstrcur = &msgstrlib9[0];
      break;
     default:
      msgstrcur = &msgstrlib0[0];
    }
     s1cdchrnu=0;     // from the library a new message has become active/current for processing, hence lets reset the character number
     chngrq2=0;       // request processed so clear change request
}


if (chngrq1)
{
  if (s1cdchrnu>(s1mxchinmsg+s1cdnm))
  {
     chngrq2=1;       // set change request as we have processed the current message completely
     s1cdchrnu=0;     // all character in current message have scrolled out, hence reset the character number
     s1cdmsgnu++;     // time to look at the next message for processing
  }
  elseif (s1cdchrnu>s1mxchinmsg)
  {
     pos=showdot;     // define position for dot after the last character in message
     s1cdchrnu++;     // point to the next character number
     chngrq1=0;       // request processed so clear change request
  }
  else
  {
     pos=lc.getCharArrayPosition(*(msgstrcur+s1cdchrnu));  // define position for current character
     s1cdchrnu++;                                          // point to the next character number
     chngrq1=0;                                            // request processed so clear change request
  }
  s1cdimgof=0;
}


switch(s1cdimgof)
{
 case 5:                                           // for offset value of 5
    chngrq1=1;                                     // set change request as we need to identify appropriate pos for next chr in current/next msg
 case 4:                                           // for offset value of 4
 case 3:                                           // for offset value of 3
 case 2:                                           // for offset value of 2
 case 1:                                           // for offset value of 1
 case 0:                                           // for offset value of 0
    array_dsply[0]=alphabetBitmap[pos][s1cdimgof]; // pick the byte from image and post it at the head/first offset
    s1cdimgof++;                                   // increment offset
 break;
 default:                                          // catch all just in case
    chngrq1=1;                                     // if in case we get lost, set change request for graceful exit
}


//
// Code section above tested  by CS on MMM ddth 2014
// ***** Section Ends above *****
